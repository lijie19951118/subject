import{_ as m}from"./index-e118b9b0.js";import{e as c,ag as u,o as b,c as p,W as l,Q as o,U as t,av as h,aw as f,a as n}from"./myVue-6b61aabf.js";const e=a=>(h("data-v-3493672d"),a=a(),f(),a),y={class:"mine"},v=e(()=>n("div",{class:"content"},[t(" 常用的变换函数包括："),n("br"),n("b",null,"translate(x, y)"),t("：对元素进行平移，其中 x 和 y 分别指定水平和垂直方向上的平移距离。"),n("br"),n("b",null,"scale(x, y)"),t("：对元素进行缩放，其中 x 和 y 分别指定水平和垂直方向上的缩放比例。"),n("br"),n("b",null,"rotate(angle)"),t("：对元素进行旋转，其中 angle 指定旋转角度，单位为度。"),n("br"),n("b",null,"skew(x-angle, y-angle)"),t("：对元素进行倾斜，其中 x-angle 和 y-angle 分别指定水平和垂直方向上的倾斜角度，单位为度。 可以组合多个变换函数来实现复合的变换效果，例如："),n("br"),t(' element.style.transform = "translate(100px, 50px) rotate(45deg)";'),n("br"),t(" 这将对元素进行平移和旋转操作。 注意，使用 transform 属性时需要考虑兼容性，不同浏览器可能对一些变换函数的支持存在差异。可以使用浏览器前缀来确保兼容性，例如 -webkit-transform、-moz-transform 等。此外，还可以通过 JavaScript 库（如 jQuery、GSAP 等）来简化对元素变换的操作和管理。 ")],-1)),x=e(()=>n("br",null,null,-1)),S=e(()=>n("br",null,null,-1)),g=e(()=>n("br",null,null,-1)),k=e(()=>n("br",null,null,-1)),w=e(()=>n("br",null,null,-1)),A=e(()=>n("b",null,"property",-1)),C=e(()=>n("br",null,null,-1)),V=e(()=>n("b",null,"duration",-1)),I=e(()=>n("br",null,null,-1)),N=e(()=>n("b",null,"timing-function",-1)),B=e(()=>n("br",null,null,-1)),J=e(()=>n("b",null,"delay",-1)),P=e(()=>n("br",null,null,-1)),E=e(()=>n("br",null,null,-1)),Q=e(()=>n("br",null,null,-1)),U=e(()=>n("br",null,null,-1)),X=e(()=>n("br",null,null,-1)),j=e(()=>n("br",null,null,-1)),q=e(()=>n("br",null,null,-1)),z=e(()=>n("br",null,null,-1)),G=e(()=>n("br",null,null,-1)),T=e(()=>n("div",null,[t(" 在 CSS 中，animation 属性用于定义动画效果。它是一个复合属性，可以通过设置多个子属性来控制动画的各个方面，包括动画名称、持续时间、延迟、重复次数、播放方向等。 animation 属性的语法如下："),n("br"),t(" animation: name duration timing-function delay iteration-count direction fill-mode play-state;"),n("br"),t(" 各个子属性的含义如下："),n("br"),n("b",null,"animation-name"),t("：指定要应用的动画名称，可以是通过 @keyframes 规则定义的动画名称，也可以是使用 animation-name 属性定义的动画名称。"),n("br"),n("b",null,"animation-duration"),t("：指定动画的持续时间，可以是以秒（s）或毫秒（ms）为单位的数值，例如 1s、500ms。"),n("br"),n("b",null,"animation-timing-function"),t("：指定动画的时间函数，控制动画的速度变化。常用的时间函数有 ease、linear、ease-in、ease-out、ease-in-out 等。"),n("br"),n("b",null,"animation-delay"),t("：指定动画开始之前的延迟时间，可以是以秒（s）或毫秒（ms）为单位的数值。"),n("br"),n("b",null,"animation-iteration-count"),t("：指定动画的重复次数，可以是具体的数值，也可以是 infinite 表示无限循环。"),n("br"),n("b",null,"animation-direction"),t("：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（交替播放）。"),n("br"),n("b",null,"animation-fill-mode"),t("：指定动画在不播放时的状态样式。常用的值有 none（动画结束时回到初始状态）、forwards（动画结束时保持最后一个关键帧的样式）、backwards（动画延迟期间应用第一个关键帧的样式）等。"),n("br"),n("b",null,"animation-play-state"),t("：指定动画的播放状态，可以是 running（运行中）或 paused（暂停）。"),n("br")],-1)),W=e(()=>n("div",null,[t(" 1.Element.animate()："),n("br"),t(" 该方法用于为指定的元素创建一个新的动画效果。它接受两个参数：keyframes 和 options。keyframes 是一个描述动画关键帧的数组，options 是一个对象，用于指定动画的各种选项，如持续时间、延迟、重复次数等。 ")],-1)),D=e(()=>n("div",null,[t(" const element = document.querySelector('.my-element');"),n("br"),t(" const keyframes = ["),n("br"),t(" { transform: 'translateX(0)' },"),n("br"),t(" { transform: 'translateX(100px)' }"),n("br"),t(" ];"),n("br"),t(" const options = {"),n("br"),t(" duration: 1000,"),n("br"),t(" iterations: Infinity"),n("br"),t(" };"),n("br"),t(" element.animate(keyframes, options); ")],-1)),F=e(()=>n("div",null,[n("b",null,"Animation.play()"),t("：该方法用于播放动画效果。调用该方法后，动画将开始执行。")],-1)),H=e(()=>n("div",null,[n("b",null,"Animation.pause()"),t("：该方法用于暂停动画效果。调用该方法后，动画将暂停执行。")],-1)),K=e(()=>n("div",null,[n("b",null,"Animation.cancel()"),t("：该方法用于取消动画效果。调用该方法后，动画将立即停止并被移除。")],-1)),L=e(()=>n("div",null,[n("b",null,"Animation.finished"),t("：该属性是一个 Promise，当动画播放完成时，该 Promise 将被解析。")],-1)),M=e(()=>n("div",null,"const animation = element.animate(keyframes, options); animation.finished.then(() => { console.log('Animation finished'); });",-1)),O={__name:"index",setup(a){const s=c("transform");return(R,r)=>{const i=u("el-tab-pane"),_=u("el-tabs");return b(),p("div",y,[l(_,{modelValue:s.value,"onUpdate:modelValue":r[0]||(r[0]=d=>s.value=d)},{default:o(()=>[l(i,{label:"transform ",name:"transform"},{default:o(()=>[v]),_:1}),l(i,{label:"transation",name:"transation"},{default:o(()=>[t(" transition 属性用于定义元素过渡效果，使元素在改变属性值时平滑过渡到新的状态。"),x,t(" transition 属性是一个简写属性，可以通过设置多个子属性来控制过渡的各个方面，包括过渡属性、过渡持续时间、过渡延迟、过渡时间函数等。"),S,t(" transition 属性的语法如下："),g,t(" transition: property duration timing-function delay;"),k,t(" 各个子属性的含义如下："),w,A,t("：指定要过渡的 CSS 属性名称，可以是单个属性，也可以是多个属性以逗号分隔。例如 width、opacity、transform 等。"),C,V,t("：指定过渡的持续时间，可以是以秒（s）或毫秒（ms）为单位的数值，例如 1s、500ms。"),I,N,t("：指定过渡的时间函数，控制过渡的速度变化。常用的时间函数有 ease、linear、ease-in、ease-out、ease-in-out 等。"),B,J,t("：指定过渡开始之前的延迟时间，可以是以秒（s）或毫秒（ms）为单位的数值。"),P,t(" 以下是一个示例，展示了如何使用 transition 属性实现元素的宽度过渡效果："),E,t(" .element {"),Q,t(" width: 100px;"),U,t(" transition: width 1s ease-in-out 0.5s;"),X,t(" }"),j,t(" .element:hover {"),q,t(" width: 200px;"),z,t(" }"),G,t(" 上述示例中，.element 元素在鼠标悬停时宽度从 100px 过渡到 200px，过渡持续时间为 1 秒，采用缓动函数 ease-in-out，延迟时间为 0.5 秒。这样，元素的宽度改变时会以平滑的过渡效果进行动画。 ")]),_:1}),l(i,{label:"animationCSS",name:"animationCSS"},{default:o(()=>[T]),_:1}),l(i,{label:"animationJS",name:"animationJS"},{default:o(()=>[W,D,F,H,K,L,M]),_:1})]),_:1},8,["modelValue"])])}}},$=m(O,[["__scopeId","data-v-3493672d"]]);export{$ as default};
